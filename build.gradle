import org.apache.tools.ant.filters.*

buildscript {
    ext.corda_release_group = 'net.corda'
    ext.corda_release_distribution = 'net.corda'
    ext.corda_release_version = '3.2-corda'
    ext.corda_gradle_plugins_version = '3.1.0'
    ext.kotlin_version = '1.1.60'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'java'
apply plugin: 'maven'

sourceSets {
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }

}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    contractsStates
    flows
    common
}

artifacts {
    contractsStates file("${buildDir}/jar/cordapp-contracts-states-${version}.jar")
}

artifacts {
    flows file("${buildDir}/jar/cordapp-flows-${version}.jar")
}

artifacts {
    common file("${buildDir}/jar/cordapp-common-${version}.jar")
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    compile "org.jbundle.util:org.jbundle.util.jbackup:2.0.0"
    compile "net.sf.webtestfixtures:webtestfixtures:2.0.1.3"
    compile "khttp:khttp:0.1.0"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // CorDapp dependencies
    // Specify your CorDapp's dependencies below, including dependent CorDapps.
    // We've defined Cash as a dependent CorDapp as an example.
    cordapp project(":cordapp-contracts-states")
    cordapp project(":cordapp-flows")
    cordapp project(":cordapp-common")
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    workingDir = "${buildDir}/tests"
}
integrationTest.dependsOn('copyConfig')

tasks.test.dependsOn('copyConfig')

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task copyConfig() {
    doLast {
        [
                ["${buildDir}/nodes/HMLR", true],
                ["${buildDir}/nodes/Conveyancer1", false],
                ["${buildDir}/nodes/Conveyancer2", false],
                ["${buildDir}/nodes/Lender1", false],
                ["${buildDir}/nodes/SettlingParty", false],
                ["${buildDir}/nodes/HMRC", false],
                ["${buildDir}/tests", true]
        ].each { dest ->
            copy {
                from("${projectDir}/configuration.properties")
                into("${dest[0]}")

                if (dest[1]) {
                    filter(ReplaceTokens, tokens: [
                            configurationTitleApiUrl: "${-> project.titleApiUrl}".toString()
                    ])
                }
            }
        }
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=Plymouth,C=GB"
        notary = [validating: false]
        p2pPort 10002
        cordapps = []

    }

    node {
        name "O=HMLR,L=Plymouth,C=GB"
        p2pPort 10005
        rpcSettings {
            address("0.0.0.0:10006")
            adminAddress("0.0.0.0:10046")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-flows:$project.version",
                "$project.group:cordapp-common:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Conveyancer1,L=Plymouth,C=GB"
        p2pPort 10008
        rpcSettings {
            address("0.0.0.0:10009")
            adminAddress("0.0.0.0:10049")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-flows:$project.version",
                "$project.group:cordapp-common:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Conveyancer2,L=Plymouth,C=GB"
        p2pPort 10011
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("0.0.0.0:10412")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-flows:$project.version",
                "$project.group:cordapp-common:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Lender1,L=Plymouth,C=GB"
        p2pPort 10014
        rpcSettings {
            address("0.0.0.0:10015")
            adminAddress("0.0.0.0:10415")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-flows:$project.version",
                "$project.group:cordapp-common:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=SettlingParty,L=Plymouth,C=GB"
        p2pPort 10017
        rpcSettings {
            address("0.0.0.0:10018")
            adminAddress("0.0.0.0:10418")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-flows:$project.version",
                "$project.group:cordapp-common:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=HMRC,L=Plymouth,C=GB"
        p2pPort 10020
        rpcSettings {
            address("0.0.0.0:10021")
            adminAddress("0.0.0.0:10421")
        }
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp-flows:$project.version",
                "$project.group:cordapp-common:$project.version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    deployNodes.finalizedBy copyConfig
}

jar {

    doLast {
        copy {
            from(project(':cordapp-contracts-states').jar.outputs.files.getFiles())
            into("${buildDir}/jar")
        }
        copy {
            from(project(':cordapp-flows').jar.outputs.files.getFiles())
            into("${buildDir}/jar")
        }
        copy {
            from(project(':cordapp-common').jar.outputs.files.getFiles())
            into("${buildDir}/jar")
        }
    }
}
